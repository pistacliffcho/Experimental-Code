// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sum_yw
NumericVector sum_yw(NumericMatrix Y_mat, List Omega, int r, NumericVector w);
RcppExport SEXP _monoMissGMM_sum_yw(SEXP Y_matSEXP, SEXP OmegaSEXP, SEXP rSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< List >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_yw(Y_mat, Omega, r, w));
    return rcpp_result_gen;
END_RCPP
}
// compute_y_r
List compute_y_r(NumericMatrix data, List Omega, NumericVector w);
RcppExport SEXP _monoMissGMM_compute_y_r(SEXP dataSEXP, SEXP OmegaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_y_r(data, Omega, w));
    return rcpp_result_gen;
END_RCPP
}
// chol_lowRankUpdate
arma::mat chol_lowRankUpdate(const Rcpp::NumericMatrix xs, const arma::mat& Ld, const Rcpp::NumericVector ws, bool update);
RcppExport SEXP _monoMissGMM_chol_lowRankUpdate(SEXP xsSEXP, SEXP LdSEXP, SEXP wsSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ld(LdSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< bool >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_lowRankUpdate(xs, Ld, ws, update));
    return rcpp_result_gen;
END_RCPP
}
// add_weighted_outer_prod
void add_weighted_outer_prod(NumericVector v, arma::mat& m, double w);
RcppExport SEXP _monoMissGMM_add_weighted_outer_prod(SEXP vSEXP, SEXP mSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    add_weighted_outer_prod(v, m, w);
    return R_NilValue;
END_RCPP
}
// computeMLE_with_yr
List computeMLE_with_yr(NumericMatrix data, NumericVector ws, List Omega, List y_r, NumericMatrix ss_start);
RcppExport SEXP _monoMissGMM_computeMLE_with_yr(SEXP dataSEXP, SEXP wsSEXP, SEXP OmegaSEXP, SEXP y_rSEXP, SEXP ss_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< List >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< List >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ss_start(ss_startSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMLE_with_yr(data, ws, Omega, y_r, ss_start));
    return rcpp_result_gen;
END_RCPP
}
// computeMLE
List computeMLE(NumericMatrix data, NumericVector ws, List Omega, NumericMatrix ss_start);
RcppExport SEXP _monoMissGMM_computeMLE(SEXP dataSEXP, SEXP wsSEXP, SEXP OmegaSEXP, SEXP ss_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< List >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ss_start(ss_startSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMLE(data, ws, Omega, ss_start));
    return rcpp_result_gen;
END_RCPP
}
// forwardSolve
NumericVector forwardSolve(NumericMatrix low_chol, NumericVector y, int r);
RcppExport SEXP _monoMissGMM_forwardSolve(SEXP low_cholSEXP, SEXP ySEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type low_chol(low_cholSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardSolve(low_chol, y, r));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_Omega
NumericVector dmvnorm_Omega(NumericMatrix data, NumericVector mu, NumericMatrix chol_S, List Omega);
RcppExport SEXP _monoMissGMM_dmvnorm_Omega(SEXP dataSEXP, SEXP muSEXP, SEXP chol_SSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type chol_S(chol_SSEXP);
    Rcpp::traits::input_parameter< List >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_Omega(data, mu, chol_S, Omega));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_one
double dmvnorm_one(NumericVector x, NumericVector mu, NumericMatrix chol_S, int r);
RcppExport SEXP _monoMissGMM_dmvnorm_one(SEXP xSEXP, SEXP muSEXP, SEXP chol_SSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type chol_S(chol_SSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_one(x, mu, chol_S, r));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_mono
NumericVector dmvnorm_mono(NumericMatrix x, NumericVector mu, NumericMatrix chol_S, IntegerVector r);
RcppExport SEXP _monoMissGMM_dmvnorm_mono(SEXP xSEXP, SEXP muSEXP, SEXP chol_SSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type chol_S(chol_SSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_mono(x, mu, chol_S, r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_monoMissGMM_sum_yw", (DL_FUNC) &_monoMissGMM_sum_yw, 4},
    {"_monoMissGMM_compute_y_r", (DL_FUNC) &_monoMissGMM_compute_y_r, 3},
    {"_monoMissGMM_chol_lowRankUpdate", (DL_FUNC) &_monoMissGMM_chol_lowRankUpdate, 4},
    {"_monoMissGMM_add_weighted_outer_prod", (DL_FUNC) &_monoMissGMM_add_weighted_outer_prod, 3},
    {"_monoMissGMM_computeMLE_with_yr", (DL_FUNC) &_monoMissGMM_computeMLE_with_yr, 5},
    {"_monoMissGMM_computeMLE", (DL_FUNC) &_monoMissGMM_computeMLE, 4},
    {"_monoMissGMM_forwardSolve", (DL_FUNC) &_monoMissGMM_forwardSolve, 3},
    {"_monoMissGMM_dmvnorm_Omega", (DL_FUNC) &_monoMissGMM_dmvnorm_Omega, 4},
    {"_monoMissGMM_dmvnorm_one", (DL_FUNC) &_monoMissGMM_dmvnorm_one, 4},
    {"_monoMissGMM_dmvnorm_mono", (DL_FUNC) &_monoMissGMM_dmvnorm_mono, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_monoMissGMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
