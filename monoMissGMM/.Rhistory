# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned to
library(icenReg)
set.seed(12)
# Simulating data
sim_data = simIC_weib(n = 50)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
## Fitting ic_np WITHOUT formula
# If we just include a nx2 matrix as the first argument,
# ic_np will just fit the NPMLE to that data alone
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue", xlim = c(0, 3))
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned to
plot(fit1, col = "blue", xlim = c(0, 3))
plot(fit1, col = "blue", xlim = c(0, 3))
plot(fit1, col = "blue", xlim = c(0, 30))
library(icenReg)
set.seed(12)
# Simulating data
sim_data = simIC_weib(n = 50)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
library(icenReg)
set.seed(12)
# Simulating data
sim_data = simIC_weib(n = 50, b2 = 0)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
## Fitting ic_np WITHOUT formula
# If we just include a nx2 matrix as the first argument,
# ic_np will just fit the NPMLE to that data alone
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned to
library(icenReg)
set.seed(12)
# Simulating data
sim_data = simIC_weib(n = 100, b2 = 0)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
## Fitting ic_np WITHOUT formula
# If we just include a nx2 matrix as the first argument,
# ic_np will just fit the NPMLE to that data alone
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned to
library(icenReg)
set.seed(1)
# Simulating data
sim_data = simIC_weib(n = 100, b2 = 0)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
## Fitting ic_np WITHOUT formula
# If we just include a nx2 matrix as the first argument,
# ic_np will just fit the NPMLE to that data alone
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned to
plot(t_ints[,c("upper")], surv_probs,
xlab = 'Time', ylab = "S(t)",
lwd = 4, col = "blue")
lines(t_ints[,c("lower")], surv_probs,
lwd = 4, col = "blue")
# Extracting the survival probabilities
surv_probs = g1_SCurve$S_curves$baseline
# Extracting Turnbull Intervals
t_ints = g1_SCurve$Tbull_ints
plot(t_ints[,c("upper")], surv_probs,
xlab = 'Time', ylab = "S(t)",
lwd = 4, col = "blue")
lines(t_ints[,c("lower")], surv_probs,
lwd = 4, col = "blue")
plot(t_ints[,c("upper")], surv_probs,
xlab = 'Time', ylab = "S(t)",
lwd = 4, col = "blue", type = "l")
lines(t_ints[,c("lower")], surv_probs,
lwd = 4, col = "blue")
plot(t_ints[,c("upper")], surv_probs,
xlab = 'Time', ylab = "S(t)",
lwd = 4, col = "blue", type = "s")
lines(t_ints[,c("lower")], surv_probs,
lwd = 4, col = "blue", type = "s")
# Verifying this is what we get from plotting fit1
lines(fit1, col = 'red')
library(icenReg)
set.seed(1)
# Simulating data
sim_data = simIC_weib(n = 100, b2 = 0)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
## Fitting ic_np WITHOUT formula
# If we just include a nx2 matrix as the first argument,
# ic_np will just fit the NPMLE to that data alone
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned
#             to each Turnbull interval. For ic_np, there
#             will only be one item: baseline
#             (for ic_sp, it can have multiple items
#             if newdata includes multiple rows)
# To demonstrate what these mean, let's recreate plot(fit1) manually
# Extracting the survival probabilities
surv_probs = g1_SCurve$S_curves$baseline
# Extracting Turnbull Intervals
t_ints = g1_SCurve$Tbull_ints
plot(t_ints[,c("upper")], surv_probs,
xlab = 'Time', ylab = "S(t)",
lwd = 4, col = "blue", type = "s")
lines(t_ints[,c("lower")], surv_probs,
lwd = 4, col = "blue", type = "s")
# Verifying this is what we get from plotting fit1
# Note that it lays right on top
lines(fit1, col = 'red')
library(icenReg)
set.seed(1)
# Simulating data
sim_data = simIC_weib(n = 100, b2 = 0)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
## Fitting ic_np WITHOUT formula
# If we just include a nx2 matrix as the first argument,
# ic_np will just fit the NPMLE to that data alone
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned
#             to each Turnbull interval. For ic_np, there
#             will only be one item: baseline
#             (for ic_sp, it can have multiple items
#             if newdata includes multiple rows)
# To demonstrate what these mean, let's recreate plot(fit1) manually
# Extracting the survival probabilities
surv_probs = g1_SCurve$S_curves$baseline
# Extracting Turnbull Intervals
t_ints = g1_SCurve$Tbull_ints
plot(t_ints[,c("upper")], surv_probs,
xlab = 'Time', ylab = "S(t)",
lwd = 4, col = "lightblue", type = "s")
lines(t_ints[,c("lower")], surv_probs,
lwd = 4, col = "lightblue", type = "s")
# Verifying this is what we get from plotting fit1
# Note that it lays right on top
lines(fit1, col = 'red')
library(icenReg)
set.seed(1)
# Simulating data
sim_data = simIC_weib(n = 100, b2 = 0)
# Splitting up data by binary x2 variable
split_data = split(sim_data, sim_data$x2)
## Fitting ic_np WITHOUT formula
# If we just include a nx2 matrix as the first argument,
# ic_np will just fit the NPMLE to that data alone
# Making fits individually
# fit1 uses only data with x2 == -1
g1_data = split_data[["-1"]][,c("l", "u")]
fit1 = ic_np(g1_data)
# fit2 uses only data with x2 == 1
g2_data = split_data[["1"]][,c("l", "u")]
fit2 = ic_np(g2_data)
plot(fit1, col = "blue")
lines(fit2, col = "orange")
# EXTRACTING SURVIVAL INFO
g1_SCurve = getSCurves(fit1)
# Let's examine what we get...
str(g1_SCurve)
# Note that we have two items in this list:
#   Tbull_ints: Actual Turnbull Intervals (i.e., time)
#   S_curves: A list of survival probabilities assigned
#             to each Turnbull interval. For ic_np, there
#             will only be one item: baseline
#             (for ic_sp, it can have multiple items
#             if newdata includes multiple rows)
# To demonstrate what these mean, let's recreate plot(fit1) manually
# Extracting the survival probabilities
surv_probs = g1_SCurve$S_curves$baseline
# Extracting Turnbull Intervals
t_ints = g1_SCurve$Tbull_ints
plot(t_ints[,c("upper")], surv_probs,
xlab = 'Time', ylab = "S(t)",
lwd = 4, col = "green", type = "s")
lines(t_ints[,c("lower")], surv_probs,
lwd = 4, col = "green", type = "s")
# Verifying this is what we get from plotting fit1
# Note that it lays right on top
lines(fit1, col = 'red')
fit_both = ic_np(cbind(l, u) ~ x2, data = sim_data)
fit1_fromFormula = fit_both$fitList[["-1"]]
# Plotting on top of each other
plot(fit1_fromFormula)
# Plotting on top of each other
plot(fit1_fromFormula, lwd = 4, col = "green")
lines(fit1, col = "red")
library(survival)
y <- rexp(100)
x = rnorm(100)
grp = rbinom(100, size = 4, prob = 0.5)
library(survival)
y <- rexp(100)
x = rnorm(100)
grp = rbinom(100, size = 4, prob = 0.5)
fit <- survreg(y ~ x + cluster(grp))
fit <- survreg(Surv(y) ~ x + cluster(grp))
summary(fit)
grp2 = rbinom(100, size = 4, prob = 0.5)
fit <- survreg(Surv(y) ~ x + cluster(grp) + cluster(grp2))
summary(fit)
fit2 <- coxph(Surv(y) ~ x + cluster(grp) + cluster(grp2))
summary(fit2)
?cluster
form = cbind(l, u) ~ x + cluster(x2) + x3
form[[1]]
form[[2]]
form[[3]]
rhs = form[[3]]
rhs
rhs[1]
rhs[[1]]
rhs[[2]]
rhs[[3]]
rhs[[4]]
as.character(rhs)
checkForCluster = function(form){
# Extracting right hand side
rhs = form[[3]]
# Turning into characters
rhs_char = as.character(rhs)
if(any(grepl('cluster(', rhs_char) ) )
stop("cluster(covar) not implemented in icenReg. To account for repeated measures, see ?ir_clustBoot")
}
checkForCluster(form)
checkForCluster = function(form){
# Extracting right hand side
rhs = form[[3]]
# Turning into characters
rhs_char = as.character(rhs)
if(any(grepl('cluster\(', rhs_char) ) )
stop("cluster(covar) not implemented in icenReg. To account for repeated measures, see ?ir_clustBoot")
}
form = cbind(l, u) ~ x + cluster(x2) + x3
checkForCluster = function(form){
# Extracting right hand side
rhs = form[[3]]
# Turning into characters
rhs_char = as.character(rhs)
if(any(grepl('cluster\(', rhs_char) ) )
stop("cluster(covar) not implemented in icenReg. To account for repeated measures, see ?ir_clustBoot")
}
tst = "cluster\("
tst = "cluster/("
tst
checkFor_cluster = function(form){
# Extracting right hand side
rhs = form[[3]]
# Turning into characters
rhs_char = as.character(rhs)
if(any(grepl("cluster(", rhs_char) ) )
stop("cluster(covar) not implemented in icenReg. To account for repeated measures, see ?ir_clustBoot")
}
form = cbind(l, u) ~ x + cluster(x2) + x3
checkFor_cluster(form)
"\("
checkFor_cluster = function(form){
# Extracting right hand side
rhs = form[[3]]
# Turning into characters
rhs_char = as.character(rhs)
if(any(grepl("cluster\\(", rhs_char) ) )
stop("cluster(covar) not implemented in icenReg. To account for repeated measures, see ?ir_clustBoot")
}
form = cbind(l, u) ~ x + cluster(x2) + x3
checkFor_cluster(form)
simdata = simIC_weib()
fit <- ic_sp(cbind(l,u) ~ x1 + x2, data = simdata)
is(fit)
fit2 <- ic_par(cbind(l,u) ~ x1 + x2, data = simdata)
is(fit2)
fit$call
fit <- ic_sp(cbind(l,u) ~ x1 + x2, data = simdata, bs_samples = 100)
fit$call
fcall = fit$call
fcall$bs_samples = 0
fcall
fit$call
library(monoMissGMM)
library(icenReg)
setwd("~/Desktop/icenReg_devel/Code/icenReg")
library(devtools)
document()
library(icenReg)
simData = simIC_cluster()
fit_np = ic_np(simData[,c("l", "u")]  )
names(simData)
simData = simIC_cluster()
fit_np = ic_np(simData[,c("l", "u")]  )
fit_par = ic_par(cbind(l, u) ~ x1 + x2, data = simData)
fit_sp = ic_sp(cbind(l,u) ~ x1 + x2, data = simData)
fit_par
# TESTING BOOTSTRAP CODE
library(icenReg)
simData = simIC_cluster()
fit_np = ic_np(simData[,c("l", "u")]  )
fit_par = ic_par(cbind(l, u) ~ x1 + x2, data = simData)
fit_sp = ic_sp(cbind(l,u) ~ x1 + x2, data = simData)
fit_np
fit_par
fit_sp
# TESTING BOOTSTRAP CODE
library(icenReg)
simData = simIC_cluster()
fit_np = ic_np(simData[,c("l", "u")]  )
fit_par = ic_par(cbind(l, u) ~ x1 + x2, data = simData)
fit_sp = ic_sp(cbind(l,u) ~ x1 + x2, data = simData)
fit_np
fit_par
fit_sp
# TESTING BOOTSTRAP CODE
library(icenReg)
simData = simIC_cluster()
fit_np = ic_np(simData[,c("l", "u")]  )
fit_par = ic_par(cbind(l, u) ~ x1 + x2, data = simData)
fit_sp = ic_sp(cbind(l,u) ~ x1 + x2, data = simData)
fit_np
fit_par
fit_sp
ir_clustBoot(fit_np, simData$ID)
ir_clustBoot(fit_par, simData$ID)
ir_clustBoot(fit_sp, simData$ID)
ir_clustBoot(fit_np, simData$ID)
traceback()
is(fit_np)
# TESTING BOOTSTRAP CODE
library(icenReg)
simData = simIC_cluster()
fit_np = ic_np(simData[,c("l", "u")]  )
fit_par = ic_par(cbind(l, u) ~ x1 + x2, data = simData)
fit_bayes = ic_bayes(cbind(l,u) ~ x1 + x2, data = simData)
fit_sp = ic_sp(cbind(l,u) ~ x1 + x2, data = simData)
fit_np
fit_bayes
fit_par
fit_sp
ir_clustBoot(fit_bayes, simData$ID)
ir_clustBoot(fit_np, simData$ID)
ir_clustBoot(fit_par, simData$ID)
ir_clustBoot(fit_sp, simData$ID)
# TESTING BOOTSTRAP CODE
library(icenReg)
simData = simIC_cluster()
fit_np = ic_np(simData[,c("l", "u")]  )
fit_par = ic_par(cbind(l, u) ~ x1 + x2, data = simData)
fit_bayes = ic_bayes(cbind(l,u) ~ x1 + x2, data = simData)
fit_sp = ic_sp(cbind(l,u) ~ x1 + x2, data = simData)
fit_np
fit_bayes
fit_par
fit_sp
ir_clustBoot(fit_bayes, simData$ID)
ir_clustBoot(fit_np, simData$ID)
ir_clustBoot(fit_par, simData$ID)
ir_clustBoot(fit_sp, simData$ID)
fit_par
fit_sp
document()
library(devtools)
document()
args(simIC_cluster)
document()
document()
document()
library(devtools)
document()
args(ic_sp)
library(icenReg)
ic_sp
args(ic_sp)
library(devtools)
document()
library(devtools)
document()
?confint
simdata = simIC_weib()
fit <- ic_par(cbind(l,u) ~ x1 + x2, data = simdata)
confint(fit)
fit
install.packages("flexsurvreg")
install.packages("flexsurv")
library(flexsurv)
fit2 <- flexsurvreg(Surv(l,u, type = 'interval2') ~ x1 + x2, data = simdata)
fit2 <- flexsurvreg(Surv(l,u, type = 'interval2') ~ x1 + x2,
data = simdata, dist = "weibull")
?flexsurvreg
simdata$l = simdata$l + 0.00000001
fit2 <- flexsurvreg(Surv(l,u, type = 'interval2') ~ x1 + x2,
data = simdata, dist = "weibull")
fit2
simdata = simIC_weib(n = 1000)
simdata$l = simdata$l + 0.00000001
fit <- ic_par(cbind(l,u) ~ x1 + x2, data = simdata)
confint(fit)
fit2 <- flexsurvreg(Surv(l,u, type = 'interval2') ~ x1 + x2,
data = simdata, dist = "weibull")
fit
fit2
fit2 <- flexsurvreg(Surv(l,u, type = 'interval') ~ x1 + x2,
data = simdata, dist = "weibull")
args(ic_par)
fit <- ic_par(cbind(l,u) ~ x1 + x2, data = simdata, model = "aft")
coef(fit)
coef(fit2)
fit$llk
fit2$loglik
fit$llk - fit2$loglik
